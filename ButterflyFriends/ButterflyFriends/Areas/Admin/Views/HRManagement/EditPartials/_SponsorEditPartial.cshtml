@model ButterflyFriends.Areas.Admin.Models.changeUserInfo
@{

    var formId = "sprofileForm";
    var ModalId = Model.Id + "sd";
}

<div id="Box">

    <modal :show.sync="showModal">
        <h3 slot="header">Rediger ansatt</h3>
        <h5 slot="body">
            @using (Ajax.BeginForm("EditSponsor", "HRManagement", new {ViewBag.sponsorPage}, new AjaxOptions
            {
                UpdateTargetId = "updateSponsors",
                InsertionMode = InsertionMode.Replace,
                HttpMethod = "POST"
            }, new {@class = "form-horizontal", role = "form", id = formId}))
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal">
                    @Html.ValidationSummary(true)
                    @Html.HiddenFor(model => model.Id)

                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input name="Email" value="@Model.Email" class="form-control" id="model" required>
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Fname, new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input name="Fname" value="@Model.Fname" class="form-control" id="model" required>
                            @Html.ValidationMessageFor(model => model.Fname)
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Lname, new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input name="Lname" value="@Model.Lname" class="form-control" required>
                            @Html.ValidationMessageFor(model => model.Lname)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.StreetAdress, new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input name="StreetAdress" value="@Model.StreetAdress" class="form-control" required>
                            @Html.ValidationMessageFor(model => model.StreetAdress)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PostCode, new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input name="PostCode" value="@Model.PostCode" class="form-control" required>
                            @Html.ValidationMessageFor(model => model.PostCode)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.City, new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input name="City" value="@Model.City" class="form-control" required>
                            @Html.ValidationMessageFor(model => model.City)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.State, new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input name="State" value="@Model.State" class="form-control" required>
                            @Html.ValidationMessageFor(model => model.State)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Phone, new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input name="Phone" value="@Model.Phone" class="form-control" required pattern="[0-9]{8,12}">
                            @Html.ValidationMessageFor(model => model.Phone)
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Password, new {@class = "col-md-2 control-label"})
                    <div class="col-md-10">
                        <input name="Password" value="" class="form-control" type="password">
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ConfirmPassword, new {@class = "col-md-2 control-label"})
                    <div class="col-md-10">
                        <input name="ConfirmPassword" value="" class="form-control" type="password">
                        @Html.ValidationMessageFor(model => model.ConfirmPassword)
                    </div>
                </div>
            }
        </h5>
    </modal>
</div>

<script type="x/template" id="@ModalId">
    <div class="modal-mask" v-on:click="close" v-show="show" transition="modal">
        <div class="modal-wrapper">
            <div class="modal-container" v-on:click.stop>

                <div class="modal-header">
                    <slot name="header">
                    </slot>
                </div>

                <div class="modal-body">
                    <slot name="body">

                    </slot>

                </div>

                <div class="modal-footer">
                    <slot name="footer">
                        <button class="btn btn-primary btn-primary" id="knapp" v-on:click="closeButton">Lagre <span class="glyphicon glyphicon-floppy-save"></span></button>

                    </slot>
                </div>
            </div>
        </div>
    </div>
</script>

<script>

    Vue.component('modal',
    {
        template: '#@ModalId',
        props: {
            show: {
                type: Boolean,
                required: true,
                twoWay: true

            }
        },
        methods: {
            close: function() {
                this.show = false;
                $(".loader-mask").hide();
            },
            closeButton: function() {

                $('<input />')
                    .attr('type', 'hidden')
                    .attr('name', "search")
                    .attr('value', $('#SponsorsearchField').val())
                    .appendTo('#@formId');

                $('<input />')
                    .attr('type', 'hidden')
                    .attr('name', "active")
                    .attr('value', $('#SponsorActive input:radio:checked').val())
                    .appendTo('#@formId');

                $('<input />')
                    .attr('type', 'hidden')
                    .attr('name', 'order')
                    .attr('value', $('#SponsorOrderFilter input:radio:checked').val())
                    .appendTo('#@formId');

                $('<input />')
                    .attr('type', 'hidden')
                    .attr('name', 'filter')
                    .attr('value', $("#SponsorSelected option:selected").val())
                    .appendTo('#@formId');

                $('<input />')
                    .attr('type', 'hidden')
                    .attr('name', 'SponsorPhone')
                    .attr('value', $('#SponsorPhone').val())
                    .appendTo('#@formId');

                $('<input />')
                    .attr('type', 'hidden')
                    .attr('name', 'SponsorStreetadress')
                    .attr('value', $('#SponsorStreetadress').val())
                    .appendTo('#@formId');

                $('<input />')
                    .attr('type', 'hidden')
                    .attr('name', 'SponsorZip')
                    .attr('value', $('#SponsorZip').val())
                    .appendTo('#@formId');

                $('<input />')
                    .attr('type', 'hidden')
                    .attr('name', 'SponsorCounty')
                    .attr('value', $('#SponsorCounty').val())
                    .appendTo('#@formId');

                $('<input />')
                    .attr('type', 'hidden')
                    .attr('name', 'SponsorCity')
                    .attr('value', $('#SponsorCity').val())
                    .appendTo('#@formId');


                $("form#@formId").submit();
                this.show = false;

            }
        },
        ready: function() {
            this.show = true;
            document.addEventListener("keydown",
                (e) => {
                    if (this.show && e.keyCode == 27) {
                        this.close();
                    } else if (this.show && e.keyCode == 13) {
                        e.preventDefault();
                        this.closeButton();
                    }
                });
        }
    });

    new Vue({
        el: '#Box',
        data: {
            showModal: false,
        },
        methods: {
            showModalf: function() {
                this.showModal = true;
            }

        }

    });


</script>