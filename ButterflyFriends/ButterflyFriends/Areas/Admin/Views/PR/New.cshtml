@model ButterflyFriends.Areas.Admin.Models.ArticleModel
@{
    ViewBag.Title = "Ny Artikkel";
    var name = @Model.Name;
    var date = @Model.Date.Day + ". " + Model.Date.ToString("MMMM") + " " + Model.Date.Year;
    var titlePlaceholder = "<Tittel>";
}
<link href="~/Scripts/ContentTools/editor.css" rel="stylesheet" />
<br />
<h5 id="success" class="text-success statusText">@ViewBag.Message</h5>
<h5 id="error" class="text-danger statusText"></h5>

<div>
    <div id="dialog" title="Instruksjoner">
        <p>Snarveier:</p>
        <ul>
            <li>Shift+Enter: Legger til ny linje i et avsnitt.</li>
            <li>Enter: Legger til ny seksjon av dokumentet.</li>
            <li>Ctrl+S: Lagrer dokumentet.</li>
        </ul>
        <p>Tips:</p>
        <ul>
            <li>Trykk på blyanten for å starte å redigere. Trykk så på den grønne checkboksen når du vil lagre, og det røde krysset dersom du ønsker fjerne nylie endringer.</li>
            <li>Trykk på tagen nede i venstre hjørne for å endre stilen på den aktive seksjonen i dokumentet.</li>
        </ul>
    </div>
</div>
<button id="dilaogBtn" class="btn btn-info articleInstructionBtn"><span class="glyphicon glyphicon-question-sign"></span></button>

<article class="article" style="border: 1px solid #888888;">
    <section class="article__content">
        <h1 id="header" data-fixture data-name="article-title">
            @titlePlaceholder
        </h1>

        <div id ="content" data-editable data-name="article">
            <p class="authorBorder">av @name · @date</p>
            <p></p>
        </div>
    </section>
</article>

<a id="publishBtn" class="btn btn-lg btn-primary center-block home-button-link publishButton">
    Publiser <i class="fa fa-telegram" aria-hidden="true"></i>
</a>
<a id="deleteBtn" class="btn btn-lg btn-danger center-block home-button-link deleteButton">
    Slett <i class="fa fa-trash" aria-hidden="true"></i>
</a>
<a id="changeNameBtn" class="btn btn-lg btn-primary center-block home-button-link changeNameButton">
    Endre Filnavn <i class="fa fa-file-text" aria-hidden="true"></i>
</a>
<input id="articleid" hidden />

<script type="x/template" id="modal-template">
    <div class="modal-mask" v-on:click="close" v-show="show" transition="modal">
        <div class="modal-wrapper">
            <div class="modal-container" v-on:click.stop>

                <div class="modal-header">
                    <slot name="header">
                    </slot>
                </div>

                <div class="modal-body">
                    <slot name="body">
                    </slot>
                </div>

                <div class="modal-footer">
                    <slot name="footer">

                        <button class="btn btn-primary"
                                v-on:click="submit">
                            OK <span class="glyphicon glyphicon-ok"></span>
                        </button>
                    </slot>
                </div>
            </div>
        </div>
    </div>
</script>
<script type="x/template" id="delete-modal-template">
    <div class="modal-mask" v-on:click="close" v-show="show" transition="modal">
        <div class="modal-wrapper">
            <div class="modal-container" v-on:click.stop>

                <div class="modal-header">
                    <slot name="header">
                    </slot>
                </div>

                <div class="modal-body">
                    <slot name="body">
                        <div class="row">
                            <div class="col-md-3"></div>
                            <div class="col-md-3">
                                <button class="btn btn-success" v-on:click="submit">Ja <i class="fa fa-check-square" aria-hidden="true"></i></button>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-danger" v-on:click="close">Nei <i class="fa fa-minus-square" aria-hidden="true"></i></button>
                            </div>
                        </div>
                    </slot>
                </div>
            </div>
        </div>
    </div>
</script>

<div id="app">
    <modal :show.sync="showModal">

        <h3 slot="header" style="text-align: center;">Gi inlegget et navn</h3>
        <h5 slot="body">
            <p id="nameError" class="text-danger statusText"></p>
            <div class="form-group">
                <div class="col-md-2"></div>

                <div class="col-md-10">
                    <input id="articlenName" placeholder="Dokumentnavn" class="form-control" required>
                </div>
            </div>
        </h5>
    </modal>
</div>

<div id="deletePrompt">
    <modal :show.sync="showModal">

        <h3 slot="header" style="text-align: center;">Er du sikker på at du vil slette denne artikkelen?</h3>

    </modal>
</div>
<script src="~/Scripts/ContentTools/content-tools.min.js"></script>
<script>
    var editor;

    Vue.component('modal',
{
    template: '#modal-template',
    props: {
        show: {
            type: Boolean,
            required: true,
            twoWay: true
        }
    },
    methods: {
        close: function () {
            this.show = false;
        },
        submit: function () {
            if ($("#articlenName").val() !== "") {
                editor.save(true);
                this.close();
            } else {
                $("#nameError").text("Navnefeltet kan ikke være tomt");
            }
        }
    },
    ready: function () {
        document.addEventListener("keydown", (e) => {
            if (this.show && e.keyCode == 27) {

                this.close();
            }
            else if (this.show && e.keyCode == 13) {
                this.submit();
            }


        });
    }
});

    var v = new Vue({
        el: '#app',
        data: {
            showModal: false
        }
    });

    //Delete article vue modal//
    Vue.component('modal',
{
    template: '#delete-modal-template',
    props: {
        show: {
            type: Boolean,
            required: true,
            twoWay: true
        }
    },
    methods: {
        close: function () {
            this.show = false;
        },
        submit: function () {
            if ($("#articleid").val()=="") {
                $("#error").text("Artikkelen må lagres før den kan slettes");
                new ContentTools.FlashUI('no');
                this.show = false;
                return;
            }
            var formData = new FormData();
            formData.append('articleid', $("#articleid").val());
            $.ajax({
                url: '/Admin/PR/Delete',
                async: true,
                contentType: false,
                processData: false,
                type: "POST",
                data: formData,
                success: function (result) {
                    if (result.error == true) {
                        $("#error").text(result.message);
                        $("#success").text("");
                        new ContentTools.FlashUI('no');
                        editor.busy(false);
                    }
                    else if (result.success == true) {
                        window.removeEventListener('beforeunload', editor._handleBeforeUnload);
                        window.location = result.reload;
                    }

                },
                error: function (err) {
                    $("#error").text(err.statusText);
                    $("#success").text("");
                    new ContentTools.FlashUI('no');
                    editor.busy(false);
                }
            });
        }
        }
    ,
    ready: function () {
        document.addEventListener("keydown", (e) => {
            if (this.show && e.keyCode == 27) {

                this.close();
            }
            else if (this.show && e.keyCode == 13) {
                this.submit();
            }


        });
    }
});

    var deleteV = new Vue({
        el: '#deletePrompt',
        data: {
            showModal: false
        }
    });
    //--------------------//
    function deleteImage(id) {

        var formData = new FormData();
        formData.append('imageid', id);
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/Admin/PR/DeleteImage', true);
        xhr.send(formData);
    }
    window.addEventListener('load', function () {

        ContentTools.StylePalette.add([
                 new ContentTools.Style('Bildetext', 'article__caption', ['p']),
                 new ContentTools.Style('Forfatter 1', 'author', ['p']),
                 new ContentTools.Style('Forfatter 2', 'authorBorder', ['p']),
                 new ContentTools.Style('Separer tekst', 'textSeparation', ['p']),
                 new ContentTools.Style('Sitat', 'quote', ['p']),
                 new ContentTools.Style('Font: Standard', 'font-Standard'),
                 new ContentTools.Style('Font: Georgia', 'article__by-line'),
                 new ContentTools.Style('Font: Arial Black', 'font-Arial'),
                 new ContentTools.Style('Font: Comic Sans', 'font-Comic'),
                 new ContentTools.Style('Font: Impact', 'font-Impact'),
                 new ContentTools.Style('Font: Courier New', 'font-Courier'),
                 new ContentTools.Style('Font: Trebuchet MS', 'font-Trebuchet')
                 ]);

        editor = ContentTools.EditorApp.get();
        editor.init('[data-editable], [data-fixture]', 'data-name');
        editor.start();
        editor.addEventListener('saved', function (ev) {
            if ($("#articlenName").val() === "") {
                v.showModal = true;
                return;
            }
            var name, payload, regions;
            // Check that something changed
            var regObj = ContentTools.EditorApp.get().regions();
            regions = {};
            for (var regName in regObj) {
                regions[regName] = regObj[regName].html();
            }
            if (Object.keys(regions).length < 0) {
                return;
            }

            // Set the editor as busy while we save our changes
            this.busy(true);
            // Collect the contents of each region into a FormData instance
            payload = new FormData();

            
            for (name in regions) {
                if (regions.hasOwnProperty(name)) {
                    if (name == "article-title") {
                        payload.append("title", regions[name]);
                        var classList = document.getElementById('header').className.split(/\s+/);
                        var found = false;
                        for (var i = 0; i < classList.length; i++) {
                            if (classList[i] === 'text-center' ||
                                classList[i] === 'text-left' ||
                                classList[i] === 'text-right') {
                                payload.append(name, "<h1 class=" + classList[i] + ">" + regions[name] + "</h1>");
                                found = true;
                                break;
                            }
                        }
                        if (!found) {
                            payload.append(name, "<h1>" + regions[name] + "</h1>");
                        }
                    } else {
                        payload.append(name, regions[name]);
                    }
                }
            }
            payload.append("articleid", $('#articleid').val());
            payload.append("articlenName", $('#articlenName').val());

            $.ajax({
                url: '/Admin/PR/UploadArticle',
                async: true,
                contentType: false,//"application/json; charset=utf-8",
                processData: false,
                type: "POST",
                data: payload,
                xhr: function () {  // Custom XMLHttpRequest
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) { // Check if upload property exists, method to be used for progress bars or the like

                        // For handling the progress of the upload
                        //myXhr.upload.id = id;
                        //myXhr.upload.addEventListener('progress', progressHandlingFunction, false);

                    }
                    return myXhr;
                }
            ,
                success: function (result) {
                    if (result.error == true) {
                        $("#error").text(result.message);
                        $("#success").text("");
                        new ContentTools.FlashUI('no');
                        editor.busy(false);
                    }
                    else if (result.success == true) {
                        $("#success").text(result.message);
                        $("#success").removeClass("fadeOut");
                        setTimeout(function() {
                            $("#success").addClass("fadeOut");
                        }, 500);
                        $("#articleid").val(result.articleid);
                        $("#error").text("");
                        new ContentTools.FlashUI('ok');
                        editor.busy(false);
                    
                    }

                },
                error: function (err) {
                    $("#error").text(err.statusText);
                    $("#success").text("");
                    new ContentTools.FlashUI('no');
                    editor.busy(false);
                }
            });
        });
        FIXTURE_TOOLS = [['bold', 'italic', 'link', 'align-left', 'align-center', 'align-right', 'undo', 'redo', 'remove']];
        ContentEdit.Root.get().bind('focus', function (element) {
            var tools;
            if (element.isFixed()) {
                tools = FIXTURE_TOOLS;
            } else {
                tools = ContentTools.DEFAULT_TOOLS;
            }
            if (editor.toolbox().tools() !== tools) {
                return editor.toolbox().tools(tools);
            }
        });

        function imageUploader(dialog) {
            var image, xhr, xhrComplete, xhrProgress;
            dialog.addEventListener('imageuploader.cancelupload', function () {
                // Cancel the current upload

                // Stop the upload
                if (xhr) {
                    xhr.upload.removeEventListener('progress', xhrProgress);
                    xhr.removeEventListener('readystatechange', xhrComplete);
                    xhr.abort();
                }

                // Set the dialog to empty
                dialog.state('empty');
            });

            dialog.addEventListener('imageuploader.clear', function () {
                // Clear the current image
                deleteImage(image.id);
                dialog.clear();
                image = null;
            });
            /*dialog.addEventListener('imageuploader.unmount', function () {
                if(image != null){

                deleteImage(image.id);
            }
                });*/
            dialog.addEventListener('imageuploader.fileready', function (ev) {

                // Upload a file to the server
                var formData;
                var file = ev.detail().file;

                // Define functions to handle upload progress and completion
                xhrProgress = function (ev) {
                    // Set the progress for the upload
                    dialog.progress((ev.loaded / ev.total) * 100);
                }

                xhrComplete = function (ev) {
                    var response;

                    // Check the request is complete
                    if (ev.target.readyState != 4) {
                        return;
                    }

                    // Clear the request
                    xhr = null;
                    xhrProgress = null;
                    xhrComplete = null;

                    // Handle the result of the upload
                    if (parseInt(ev.target.status) == 200) {
                        //console.log(ev.target);
                        // Unpack the response (from JSON)
                        response = JSON.parse(ev.target.responseText);
                        if (response.error == null) {
                            //console.log(response);

                            // Store the image details
                            image = {
                                size: response.size.split(","),
                                url: response.url,
                                id: response.id
                            };
                            //console.log(image);
                            // Populate the dialog
                            dialog.populate(image.url, image.size);
                        } else {
                            //do something with error message
                        }
                    } else {
                        console.log(ev.target);
                        // The request failed, notify the user
                        new ContentTools.FlashUI('no');
                    }
                }

                // Set the dialog state to uploading and reset the progress bar to 0
                dialog.state('uploading');
                dialog.progress(0);

                // Build the form data to post to the server
                formData = new FormData();
                formData.append('image', file);

                // Make the request
                xhr = new XMLHttpRequest();
                xhr.upload.addEventListener('progress', xhrProgress);
                xhr.addEventListener('readystatechange', xhrComplete);
                xhr.open('POST', '/Admin/PR/uploadImage', true);
                xhr.send(formData);
            });

            function rotateImage(direction) {
                // Request a rotated version of the image from the server
                var formData;

                // Define a function to handle the request completion
                xhrComplete = function (ev) {
                    var response;

                    // Check the request is complete
                    if (ev.target.readyState != 4) {
                        return;
                    }

                    // Clear the request
                    xhr = null;
                    xhrComplete = null;

                    // Free the dialog from its busy state
                    dialog.busy(false);

                    // Handle the result of the rotation
                    if (parseInt(ev.target.status) == 200) {
                        // Unpack the response (from JSON)
                        response = JSON.parse(ev.target.responseText);
                        console.log(response);
                        if (response.error == null) {
                            // Store the image details (use fake param to force refresh)
                            image = {
                                size: response.size.split(","),
                                url: response.url + '&_ignore=' + Date.now(),
                                id: response.id
                            };

                            // Populate the dialog
                            dialog.populate(image.url, image.size);
                        } else {
                            //do something with error message
                        }
                    } else {
                        // The request failed, notify the user
                        new ContentTools.FlashUI('no');
                    }
                }

                // Set the dialog to busy while the rotate is performed
                dialog.busy(true);

                // Build the form data to post to the server
                formData = new FormData();
                formData.append('id', image.id);
                formData.append('direction', direction);

                // Make the request
                xhr = new XMLHttpRequest();
                xhr.addEventListener('readystatechange', xhrComplete);
                xhr.open('POST', '/Admin/PR/rotateImage', true);
                xhr.send(formData);
            }

            dialog.addEventListener('imageuploader.rotateccw', function () {
                rotateImage('CCW');
            });

            dialog.addEventListener('imageuploader.rotatecw',
                function() {
                    rotateImage('CW');
                });

            dialog.addEventListener('imageuploader.save', function () {
                var crop, cropRegion, formData;

                // Define a function to handle the request completion
                xhrComplete = function (ev) {
                    // Check the request is complete
                    if (ev.target.readyState !== 4) {
                        return;
                    }

                    // Clear the request
                    xhr = null
                    xhrComplete = null

                    // Free the dialog from its busy state
                    dialog.busy(false);

                    // Handle the result of the rotation
                    if (parseInt(ev.target.status) === 200) {
                        // Unpack the response (from JSON)
                        var response = JSON.parse(ev.target.responseText);
                        if (response.error == null) {
                            // Trigger the save event against the dialog with details of the
                            // image to be inserted.
                            dialog.save(
                                response.url + '&_ignore=' + Date.now(),
                                response.size.split(","),
                                {
                                    'class': "articleImage",
                                    'alt': response.alt,
                                    'data-ce-max-width': response.cemax,
                                    'id':response.id

                                });
                        } else {
                            //do something with error message
                        }
                    } else {
                        // The request failed, notify the user
                        new ContentTools.FlashUI('no');
                    }
                }

                // Set the dialog to busy while the rotate is performed
                dialog.busy(true);

                // Build the form data to post to the server
                formData = new FormData();
                formData.append('id', image.id);

                // Set the width of the image when it's inserted, this is a default
                // the user will be able to resize the image afterwards.
                formData.append('width', 600);

                // Check if a crop region has been defined by the user
                if (dialog.cropRegion()) {
                    formData.append('crop', dialog.cropRegion());
                }

                // Make the request
                xhr = new XMLHttpRequest();
                xhr.addEventListener('readystatechange', xhrComplete);
                xhr.open('POST', '/Admin/PR/insertImage', true);
                xhr.send(formData);
            });
        }

        ContentTools.IMAGE_UPLOADER = imageUploader;


        function publishArticle() {
                var formData = new FormData();
                formData.append('articleid', $("#articleid").val());
                $.ajax({
                    url: '/Admin/PR/Publish',
                    async: true,
                    contentType: false,
                    processData: false,
                    type: "POST",
                    data: formData,
                    success: function (result) {
                        if (result.error == true) {
                            $("#error").text(result.message);
                            $("#success").text("");
                            new ContentTools.FlashUI('no');
                            editor.busy(false);
                        }
                        else if (result.success == true) {
                            $("#success").text(result.message);
                            $("#success").removeClass("fadeOut");
                            setTimeout(function () {
                                $("#success").addClass("fadeOut");
                            }, 2000);
                            $("#error").text("");
                            new ContentTools.FlashUI('ok');
                            editor.busy(false);
                            if (result.published == true) {
                                $("#publishBtn").html('Stopp publisering <i class="fa fa-stop-circle" aria-hidden="true"></i>');
                            } else {
                                $("#publishBtn").html('Publiser <i class="fa fa-telegram" aria-hidden="true"></i>');

                            }
                        }

                    },
                    error: function (err) {
                        $("#error").text(err.statusText);
                        $("#success").text("");
                        publish = false;
                        new ContentTools.FlashUI('no');
                        editor.busy(false);
                    }
                });
            }

        $(document).on('keydown', function (e) {
            if (e.ctrlKey && e.which === 83) {
                e.preventDefault();
                if (editor.getState() == "editing") {
                    editor.save(true);
                }
            }
        });
        
        $("#publishBtn").on('click', function () {
                editor.busy(true);
                publishArticle();
        });
        $("#deleteBtn").on('click', function () {
            deleteV.showModal = true;
        });
        $("#changeNameBtn").on('click', function () {
            v.showModal = true;
        });
    });

    $("#dilaogBtn").on('click', function () {
        if ($('#dialog').dialog('isOpen')) {
             $("#dialog").dialog('close');
        } else {
            $("#dialog").dialog('open');
        }
    });

    $(function () {
        $("#dialog").dialog({
            position: { my: "left top", at: "left bottom", of: $("#dilaogBtn") },
            autoOpen:false,
            resizable:false
        });
        $("#dialog").parent().css('position', 'fixed');

    });


</script>

