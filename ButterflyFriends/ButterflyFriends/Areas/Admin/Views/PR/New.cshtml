@model ButterflyFriends.Areas.Admin.Models.ArticleModel
@{
    ViewBag.Title = "Ny Artikkel";
    var name = Model.Name;
    var date = Model.Date.Day + ". " + Model.Date.ToString("MMMM") + " " + Model.Date.Year;
}
<link href="~/Scripts/ContentTools/editor.min.css" rel="stylesheet"/>
<br/>
<h5 id="success" class="text-success statusText">@ViewBag.Message</h5>
<h5 id="error" class="text-danger statusText"></h5>

<div>
    <div id="dialog" title="Instruksjoner">
        <p>Snarveier:</p>
        <ul>
            <li>Shift+Enter: Legger til ny linje i et avsnitt.</li>
            <li>Enter: Legger til ny seksjon av dokumentet.</li>
            <li>Ctrl+S: Lagrer dokumentet.</li>
        </ul>
        <p>Tips:</p>
        <ul>
            <li>Trykk på blyanten for å starte å redigere. Trykk så på den grønne checkboksen når du vil lagre, og det røde krysset dersom du ønsker fjerne nylie endringer.</li>
            <li>Trykk på tagen nede i venstre hjørne for å endre stilen på den aktive seksjonen i dokumentet.</li>
        </ul>
    </div>
</div>
<button id="dilaogBtn" class="btn btn-info articleInstructionBtn">
    <span class="glyphicon glyphicon-question-sign"></span></button>

<article class="article" style="border: 1px solid #888888;">
    <section class="article__content">
        <h1 id="header" data-fixture data-name="article-title" data-ce-placeholder="Tittel...">

        </h1>
        <h4 id="preamble" data-fixture data-name="article-preamble" data-ce-placeholder="Ingress..."></h4>

        <div id="content" data-editable data-name="article">
            <p class="authorBorder">av @name · @date</p>
            <p data-ce-placeholder="Tekst..."></p>
        </div>
    </section>
</article>

<a id="publishBtn" class="btn btn-lg btn-primary center-block home-button-link publishButton">
    Publiser <i class="fa fa-telegram" aria-hidden="true"></i>
</a>
<a id="deleteBtn" class="btn btn-lg btn-danger center-block home-button-link deleteButton">
    Slett <i class="fa fa-trash" aria-hidden="true"></i>
</a>
<a id="changeNameBtn" class="btn btn-lg btn-primary center-block home-button-link changeNameButton">
    Endre Filnavn <i class="fa fa-file-text" aria-hidden="true"></i>
</a>
<a id="saveBtn" class="btn btn-lg btn-success center-block home-button-link saveButton">
    Lagre <i class="fa fa-floppy-o" aria-hidden="true"></i>
</a>
<input id="articleid" hidden/>

<script type="x/template" id="modal-template">
    <div class="modal-mask" v-on:click="close" v-show="show" transition="modal">
        <div class="modal-wrapper">
            <div class="modal-container" v-on:click.stop>

                <div class="modal-header">
                    <slot name="header">
                    </slot>
                </div>

                <div class="modal-body">
                    <slot name="body">
                    </slot>
                </div>

                <div class="modal-footer">
                    <slot name="footer">

                        <button class="btn btn-primary"
                                v-on:click="submit">
                            OK <span class="glyphicon glyphicon-ok"></span>
                        </button>
                    </slot>
                </div>
            </div>
        </div>
    </div>
</script>
<script type="x/template" id="delete-modal-template">
    <div class="modal-mask" v-on:click="close" v-show="show" transition="modal">
        <div class="modal-wrapper">
            <div class="modal-container" v-on:click.stop>

                <div class="modal-header">
                    <slot name="header">
                    </slot>
                </div>

                <div class="modal-body">
                    <slot name="body">
                        <div class="row">
                            <div class="col-md-3"></div>
                            <div class="col-md-3">
                                <button class="btn btn-success" v-on:click="submit">Ja <i class="fa fa-check-square" aria-hidden="true"></i></button>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-danger" v-on:click="close">Nei <i class="fa fa-minus-square" aria-hidden="true"></i></button>
                            </div>
                        </div>
                    </slot>
                </div>
            </div>
        </div>
    </div>
</script>

<div id="app">
    <modal :show.sync="showModal">

        <h3 slot="header" style="text-align: center;">Gi inlegget et navn</h3>
        <h5 slot="body">
            <p id="nameError" class="text-danger statusText"></p>
            <div class="form-group">
                <div class="col-md-2"></div>

                <div class="col-md-10">
                    <input id="articlenName" placeholder="Dokumentnavn" class="form-control" required>
                </div>
            </div>
        </h5>
    </modal>
</div>

<div id="deletePrompt">
    <modal :show.sync="showModal">

        <h3 slot="header" style="text-align: center;">Er du sikker på at du vil slette denne artikkelen?</h3>

    </modal>
</div>
<script src="~/Scripts/ContentTools/content-tools.min.js"></script>
<script>
    var editor;

    Vue.component('modal',
    {
        template: '#modal-template',
        props: {
            show: {
                type: Boolean,
                required: true,
                twoWay: true
            }
        },
        methods: {
            close: function() {
                this.show = false;
            },
            submit: function() {
                if ($("#articlenName").val() !== "") {
                    editor.save(true);
                    this.close();
                } else {
                    $("#nameError").text("Navnefeltet kan ikke være tomt");
                }
            }
        },
        ready: function() {
            document.addEventListener("keydown",
                (e) => {
                    if (this.show && e.keyCode == 27) {

                        this.close();
                    } else if (this.show && e.keyCode == 13) {
                        this.submit();
                    }


                });
        }
    });

    var v = new Vue({
        el: '#app',
        data: {
            showModal: false
        }
    });

    //Delete article vue modal//
    Vue.component('modal',
    {
        template: '#delete-modal-template',
        props: {
            show: {
                type: Boolean,
                required: true,
                twoWay: true
            }
        },
        methods: {
            close: function() {
                this.show = false;
            },
            submit: function() {
                if ($("#articleid").val() == "") {
                    $("#error").text("Artikkelen må lagres før den kan slettes");
                    new ContentTools.FlashUI('no');
                    this.show = false;
                    return;
                }
                var formData = new FormData();
                formData.append('articleid', $("#articleid").val());
                $.ajax({ //delete the article
                    url: '/Admin/PR/Delete',
                    async: true,
                    contentType: false,
                    processData: false,
                    type: "POST",
                    data: formData,
                    success: function(result) {
                        if (result.error == true) {
                            $("#error").text(result.message);
                            $("#success").text("");
                            new ContentTools.FlashUI('no');
                            editor.busy(false);
                        } else if (result.success == true) {
                            window.removeEventListener('beforeunload', editor._handleBeforeUnload);
                            window.location = result.reload;
                        }

                    },
                    error: function(err) {
                        $("#error").text(err.statusText);
                        $("#success").text("");
                        new ContentTools.FlashUI('no');
                        editor.busy(false);
                    }
                });
            }
        },
        ready: function() {
            document.addEventListener("keydown",
                (e) => {
                    if (this.show && e.keyCode == 27) {

                        this.close();
                    } else if (this.show && e.keyCode == 13) {
                        this.submit();
                    }


                });
        }
    });

    var deleteV = new Vue({
        el: '#deletePrompt',
        data: {
            showModal: false
        }
    });

    //--------------------//
    function deleteImage(id) {

        var formData = new FormData();
        formData.append('imageid', id);
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/Admin/PR/DeleteImage', true);
        xhr.send(formData);
    }

    window.addEventListener('load',
        function() {

            ContentTools.StylePalette.add([
                new ContentTools.Style('Bildetext', 'article__caption', ['p']),
                new ContentTools.Style('Forfatter 1', 'author', ['p']),
                new ContentTools.Style('Forfatter 2', 'authorBorder', ['p']),
                new ContentTools.Style('Separer tekst', 'textSeparation', ['p']),
                new ContentTools.Style('Sitat', 'quote', ['p']),
                new ContentTools.Style('Font: Standard', 'font-Standard'),
                new ContentTools.Style('Font: Georgia', 'article__by-line'),
                new ContentTools.Style('Font: Arial Black', 'font-Arial'),
                new ContentTools.Style('Font: Comic Sans', 'font-Comic'),
                new ContentTools.Style('Font: Impact', 'font-Impact'),
                new ContentTools.Style('Font: Courier New', 'font-Courier'),
                new ContentTools.Style('Font: Trebuchet MS', 'font-Trebuchet')
            ]);

            editor = ContentTools.EditorApp.get();
            editor.init('[data-editable], [data-fixture]', 'data-name');
            editor.start();
            editor.addEventListener('saved',
                function(ev) {
                    if ($("#articlenName").val() === "") {
                        v.showModal = true;
                        return;
                    }
                    var name, payload, regions;
                    // Check if something changed
                    var regObj = ContentTools.EditorApp.get().regions();
                    regions = {};
                    for (var regName in regObj) {
                        regions[regName] = regObj[regName].html();
                    }
                    if (Object.keys(regions).length < 0) {
                        return;
                    }

                    // Set editor as busy while saving
                    this.busy(true);
                    // collect data into formadata object
                    payload = new FormData();


                    for (name in regions) {
                        if (regions.hasOwnProperty(name)) {
                            if (name == "article-title") {
                                payload.append("title", $("#header").text());
                                payload.append("title-inner", regions[name]);
                                var classList = document.getElementById('header').className.split(/\s+/);
                                var found = false;
                                for (var i = 0; i < classList.length; i++) {
                                    if (classList[i] === 'text-center' ||
                                        classList[i] === 'text-left' ||
                                        classList[i] === 'text-right') {
                                        payload.append(name,
                                            "<h1 class=" + classList[i] + ">" + regions[name] + "</h1>");
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found) {
                                    payload.append(name, "<h1>" + regions[name] + "</h1>");
                                }
                            } else if (name == "article-preamble") {
                                payload.append("preamble", $("#preamble").text());
                                payload.append("preamble-inner", regions[name]);
                                var classList = document.getElementById('preamble').className.split(/\s+/);
                                var found = false;
                                for (var i = 0; i < classList.length; i++) {
                                    if (classList[i] === 'text-center' ||
                                        classList[i] === 'text-left' ||
                                        classList[i] === 'text-right') {
                                        payload.append(name,
                                            "<h4 class=" + classList[i] + ">" + regions[name] + "</h4>");
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found) {
                                    payload.append(name, "<h4>" + regions[name] + "</h4>");
                                }
                            } else {
                                payload.append(name, regions[name]);
                            }
                        }
                    }
                    payload.append("articleid", $('#articleid').val());
                    payload.append("articlenName", $('#articlenName').val());
                    payload.append("images", getImages());
                    $.ajax({
                        url: '/Admin/PR/UploadArticle',
                        async: true,
                        contentType: false, //"application/json; charset=utf-8",
                        processData: false,
                        type: "POST",
                        data: payload,
                        xhr: function() { // Custom XMLHttpRequest
                            var myXhr = $.ajaxSettings.xhr();
                            if (myXhr
                                .upload) {
// Check if upload property exists, method to be used for progress bars or the like

                                // For handling the progress of the upload
                                //myXhr.upload.id = id;
                                //myXhr.upload.addEventListener('progress', progressHandlingFunction, false);

                            }
                            return myXhr;
                        },
                        success: function(result) {
                            if (result.error == true) {
                                $("#error").text(result.message);
                                $("#success").text("");
                                new ContentTools.FlashUI('no');
                                editor.busy(false);
                            } else if (result.success == true) {
                                $("#success").text(result.message);
                                $("#success").removeClass("fadeOut");
                                setTimeout(function() {
                                        $("#success").addClass("fadeOut");
                                    },
                                    500);
                                $("#articleid").val(result.articleid);
                                $("#error").text("");
                                new ContentTools.FlashUI('ok');
                                editor.busy(false);

                            }

                        },
                        error: function(err) {
                            $("#error").text(err.statusText);
                            $("#success").text("");
                            new ContentTools.FlashUI('no');
                            editor.busy(false);
                        }
                    });
                });
            FIXTURE_TOOLS = [
                ['bold', 'italic', 'link', 'align-left', 'align-center', 'align-right', 'undo', 'redo', 'remove']
            ];
            ContentEdit.Root.get()
                .bind('focus',
                    function(element) {
                        var tools;
                        if (element.isFixed()) {
                            tools = FIXTURE_TOOLS;
                        } else {
                            tools = ContentTools.DEFAULT_TOOLS;
                        }
                        if (editor.toolbox().tools() !== tools) {
                            return editor.toolbox().tools(tools);
                        }
                    });

            function imageUploader(dialog) {
                var image, xhr, xhrComplete, xhrProgress;
                dialog.addEventListener('imageuploader.cancelupload',
                    function() {
                        // If fiered, cancel current upload

                        // remove events to stop upload
                        if (xhr) {
                            xhr.upload.removeEventListener('progress', xhrProgress);
                            xhr.removeEventListener('readystatechange', xhrComplete);
                            xhr.abort();
                        }

                        // empty the dialog
                        dialog.state('empty');
                    });

                dialog.addEventListener('imageuploader.clear',
                    function() {
                        // remove image
                        deleteImage(image.id);
                        dialog.clear();
                        image = null;
                    });

                dialog.addEventListener('imageuploader.fileready',
                    function(ev) {

                        // file is selected and ready
                        var formData;
                        var file = ev.detail().file;

                        // functions for handeling uploads
                        xhrProgress = function(ev) {
                            // show progress of upload
                            dialog.progress((ev.loaded / ev.total) * 100);
                        };
                        xhrComplete = function(ev) {
                            var response;

                            // check if request is complete
                            if (ev.target.readyState != 4) {
                                return;
                            }

                            // clear request when done
                            xhr = null;
                            xhrProgress = null;
                            xhrComplete = null;

                            // parse JSON response from upload event
                            if (parseInt(ev.target.status) == 200) {
                                response = JSON.parse(ev.target.responseText);
                                if (response.error == null) {

                                    // Store the image details
                                    image = {
                                        size: response.size.split(","),
                                        url: response.url,
                                        id: response.id
                                    };
                                    // show image in dialog
                                    dialog.populate(image.url, image.size);
                                } else {
                                   alert(response.error);
                                }
                            } else {
                                console.log(ev.target);
                                // request failed and we show this to user
                                new ContentTools.FlashUI('no');
                            }
                        };

                        // Indicate that the image is being uploaded
                        dialog.state('uploading');
                        dialog.progress(0);

                        //post values to server
                        formData = new FormData();
                        formData.append('image', file);

                        // Ajax request
                        xhr = new XMLHttpRequest();
                        xhr.upload.addEventListener('progress', xhrProgress);
                        xhr.addEventListener('readystatechange', xhrComplete);
                        xhr.open('POST', '/Admin/PR/uploadImage', true);
                        xhr.send(formData);
                    });

                function rotateImage(direction) {
                    // Rotate image on server and show in client
                    var formData;

                    // function to handle request progress and completion
                    xhrComplete = function(ev) {
                        var response;

                        // if request is complete return
                        if (ev.target.readyState != 4) {
                            return;
                        }

                        // Reset variables
                        xhr = null;
                        xhrComplete = null;

                        // Request complete, dialog is no longer busy
                        dialog.busy(false);

                        // Populate dialog with rotated image and parse JSON response
                        if (parseInt(ev.target.status) == 200) {
                            response = JSON.parse(ev.target.responseText);
                            console.log(response);
                            if (response.error == null) {
                                // Create image object and use JSON response values
                                image = {
                                    size: response.size.split(","),
                                    url: response.url + '&_ignore=' + Date.now(),
                                    id: response.id
                                };

                                // Display the image
                                dialog.populate(image.url, image.size);
                            } else {
                                alert(response.error);
                            }
                        } else {
                            // Reqest failed
                            new ContentTools.FlashUI('no');
                        }
                    };

                    // Set bust as rotation is being performed
                    dialog.busy(true);

                    // Create and append to formdata object
                    formData = new FormData();
                    formData.append('id', image.id);
                    formData.append('direction', direction);

                    // Make the AJAX reqest
                    xhr = new XMLHttpRequest();
                    xhr.addEventListener('readystatechange', xhrComplete);
                    xhr.open('POST', '/Admin/PR/rotateImage', true);
                    xhr.send(formData);
                }

                dialog.addEventListener('imageuploader.rotateccw',  //event for when the users wants to rotate counter clockwise
                    function() {
                        rotateImage('CCW');
                    });

                dialog.addEventListener('imageuploader.rotatecw',   //event for when the users wants to rotate clockwise
                    function() {
                        rotateImage('CW');
                    });

                dialog.addEventListener('imageuploader.save',
                    function() {
                        var crop, cropRegion, formData;

                        // handle request completion
                        xhrComplete = function(ev) {
                            // Return when request is complete
                            if (ev.target.readyState !== 4) {
                                return;
                            }

                            // request is finished, so reset variables
                            xhr = null;
                            xhrComplete = null;

                            // Dialog is no longer busy
                            dialog.busy(false);

                            // Handle and show result of roation
                            if (parseInt(ev.target.status) === 200) {
                                // Parse the JSON response from server
                                var response = JSON.parse(ev.target.responseText);
                                if (response.error == null) {
                                    // Save event of image taking in image variables
                                    dialog.save(
                                        response.url + '&_ignore=' + Date.now(),
                                        response.size.split(","),
                                        {
                                            'class': "articleImage",
                                            'alt': response.alt,
                                            'data-ce-max-width': response.cemax,
                                            'id': response.id

                                        });
                                } else {
                                    alert(response.error);
                                }
                            } else {
                                // Request failed
                                new ContentTools.FlashUI('no');
                            }
                        };

                        // Image is being inserted, editor is busy
                        dialog.busy(true);

                        // create and populate formdata object
                        formData = new FormData();
                        formData.append('id', image.id);

                        // Set default width of image
                        // This can be changed afterwards.
                        formData.append('width', 600);

                        // Has the user defined a copping region?
                        if (dialog.cropRegion()) {
                            formData.append('crop', dialog.cropRegion());
                        }

                        // Make the AJAX request
                        xhr = new XMLHttpRequest();
                        xhr.addEventListener('readystatechange', xhrComplete);
                        xhr.open('POST', '/Admin/PR/insertImage', true);
                        xhr.send(formData);
                    });
            }

            ContentTools.IMAGE_UPLOADER = imageUploader;


            function publishArticle() {
                var formData = new FormData();
                formData.append('articleid', $("#articleid").val());
                $.ajax({
                    url: '/Admin/PR/Publish',
                    async: true,
                    contentType: false,
                    processData: false,
                    type: "POST",
                    data: formData,
                    success: function(result) {
                        if (result.error == true) {
                            $("#error").text(result.message);
                            $("#success").text("");
                            new ContentTools.FlashUI('no');
                            editor.busy(false);
                        } else if (result.success == true) {
                            $("#success").text(result.message);
                            $("#success").removeClass("fadeOut");
                            setTimeout(function() {
                                    $("#success").addClass("fadeOut");
                                },
                                2000);
                            $("#error").text("");
                            new ContentTools.FlashUI('ok');
                            editor.busy(false);
                            if (result.published == true) {
                                $("#publishBtn")
                                    .html('Stopp publisering <i class="fa fa-stop-circle" aria-hidden="true"></i>');
                            } else {
                                $("#publishBtn").html('Publiser <i class="fa fa-telegram" aria-hidden="true"></i>');

                            }
                        }

                    },
                    error: function(err) {
                        $("#error").text(err.statusText);
                        $("#success").text("");
                        publish = false;
                        new ContentTools.FlashUI('no');
                        editor.busy(false);
                    }
                });
            }

            $(document)
                .on('keydown',
                    function(e) {
                        if (e.ctrlKey && e.which === 83) {
                            e.preventDefault();
                            if (editor.getState() == "editing") {
                                editor.save(true);
                            }
                        }
                    });

            $("#publishBtn")
                .on('click',
                    function() {
                        editor.busy(true);
                        publishArticle();
                    });
            $("#deleteBtn")
                .on('click',
                    function() {
                        deleteV.showModal = true;
                    });
            $("#changeNameBtn")
                .on('click',
                    function() {
                        v.showModal = true;
                    });
            $("#saveBtn")
                .on('click',
                    function() {
                        editor.save(true);
                    });

            function getImages() {
                // Get a list containing all database image IDs currently in the article
                var descendants, i, images;

                images = [];
                for (name in editor.regions()) {
                    // Search the regions for images
                    descendants = editor.regions()[name].descendants();
                    for (i = 0; i < descendants.length; i++) {
                        // Only add image ids
                        if (descendants[i].type() !== 'Image') {
                            continue;
                        }
                        var url = descendants[i].attr('src');
                        var start_pos = url.indexOf('=') + 1;
                        var end_pos = url.indexOf('&', start_pos);
                        var id = url.substring(start_pos, end_pos);

                        images.push(id);
                    }
                }
                if (images.length === 0) {
                    images = "none";
                }
                return images;
            }
        });

    $("#dilaogBtn")
        .on('click',
            function() {
                if ($('#dialog').dialog('isOpen')) {
                    $("#dialog").dialog('close');
                } else {
                    $("#dialog").dialog('open');
                }
            });

    $(function() {
        $("#dialog")
            .dialog({
                position: { my: "left top", at: "left bottom", of: $("#dilaogBtn") },
                autoOpen: false,
                resizable: false
            });
        $("#dialog").parent().css('position', 'fixed');

    });


</script>